import jsonimport osimport uuidimport openpyxl.utilsimport xlrdimport xlwtfrom sqlalchemy import or_, distinctfrom common_tools.async_api_tool import update_mantis_graphfrom common_tools.tools import create_current_format_time, op11_redis_client, conditional_filterfrom config.basic_setting import DIR_PATHfrom config.mantis_setting import GLOBAL_KEY_Dfrom mantis.controller.parse_upload_file import get_delete_unique_id, data_classification, generate_sw_numfrom mantis.mantis_caches import mantis_update_cache, mantis_get_single_cache, mantis_update_single_cache, \    mantis_get_single_result_cache, mantis_update_aug_cachefrom mantis.mantis_status import table_head, key_list, case_result_col, case_col, test_case_key, \    case_result_key, test_case_param, case_result_paramfrom mantis.models import mantis_dbfrom mantis.models.case import TestCase, CaseResult, MantisFilterRecordfrom mantis.models.mantis_config import MantisMappingRulefrom mantis.mantis_tool.data_sync_tools import run_sync_mantis_hcp3_data_to_kpmdef upload_file_func(request):    mode = request.form.get('mode')    key = request.form.get('key', None)    if mode.startswith('delete') and key != GLOBAL_KEY_D:        return {'code': 10007}    content = request.files.get('files').read()    if mode.startswith('delete'):        result = delete_case_tool(content, mode)        if result.get('code') == 200:            run_sync_mantis_hcp3_data_to_kpm()    else:        result = upload_case_tool(content, mode)    if result.get('code') == 200:        userid = request.form.get('userid', None)        mantis_update_cache()        update_mantis_graph(userid, 'personal')    return resultdef get_upload_test_sw_set(result_mapping):    data_list = result_mapping.get('insert_list', []) + result_mapping.get('upgrade_list', [])    test_sw_set = set()    for data in data_list:        test_sw = data.get('test_sw', None)        if test_sw is not None:            test_sw_set.add(test_sw)    return list(test_sw_set)def upload_case_tool(content, mode):    status, result_mapping = data_classification(content, mode)    if not status:        code, data, msg = upload_error_resp(            result_mapping.get('error_type'),            content=content,            not_exists_list=result_mapping.get('error_info')        )    else:        if mode == 'upload_case':            if result_mapping.get('insert_list'):                mantis_db.session.execute(TestCase.__table__.insert(), result_mapping.get('insert_list'))            if result_mapping.get('upgrade_list'):                mantis_db.session.bulk_update_mappings(TestCase, result_mapping.get('upgrade_list'))        elif mode == 'upload_sw':            if result_mapping.get('insert_list'):                mantis_db.session.execute(CaseResult.__table__.insert(), result_mapping.get('insert_list'))            if result_mapping.get('upgrade_list'):                mantis_db.session.bulk_update_mappings(CaseResult, result_mapping.get('upgrade_list'))            if result_mapping.get('update_case_upgrade_time_list'):                mantis_db.session.bulk_update_mappings(TestCase, result_mapping.get('update_case_upgrade_time_list'))        mantis_db.session.commit()        if mode == 'upload_case':            run_sync_mantis_hcp3_data_to_kpm()        elif mode == 'upload_sw':            test_sw_list = get_upload_test_sw_set(result_mapping)            run_sync_mantis_hcp3_data_to_kpm(test_sw_list)        code, data, msg = 200, None, 'upload success'        if mode == 'upload_case' and result_mapping.get('insert_list'):            data = [case.get('id') for case in result_mapping.get('insert_list')]    return {'code': code, 'data': data, 'msg': msg}def delete_case_tool(content, mode):    status, unique_id_list, error_type = get_delete_unique_id(content, mode)    if status:        if mode == 'delete_case':            mantis_db.session.query(TestCase).filter(TestCase.id.in_(unique_id_list)).delete()            mantis_db.session.query(CaseResult).filter(CaseResult.m_id.in_(unique_id_list)).delete()        elif mode == 'delete_sw':            mantis_db.session.query(CaseResult).filter(CaseResult.id.in_(unique_id_list)).delete()        mantis_db.session.commit()        return {            'code': 200,            'data': {"deal_num": len(unique_id_list)},            'msg': 'Success, %d Case deleted.' % len(unique_id_list),        }    else:        code, data, msg = upload_error_resp(error_type, content, unique_id_list)        return {            'code': code,            'data': data,            'msg': msg,        }def upload_error_resp(error_type, content=None, not_exists_list=None):    if error_type in ['error_value', 'redundant_column']:        filename, error_info = download_error_file(content, not_exists_list, error_type)        for row in range(0, len(error_info)):            error_info[row][0] += 1            error_info[row][1] = openpyxl.utils.get_column_letter(error_info[row][1] + 1)        data = {"filename": filename, "error_type": error_type, "error_info": error_info}        if error_type == 'error_value':            code, msg = 10014, None        else:            code, msg = 10003, 'Redundant column exist in the uploaded file'    elif error_type == 'duplicate_row':        code = 10003        data = {"filename": '', "error_type": error_type, "error_info": not_exists_list}        msg = "Duplicate test cases exist in the uploaded file"    elif error_type == 'Sheet':        code = 10003        data = {"filename": '', "error_type": 'invalid_sheet'}        msg = 'First sheet is blank, please check sheet arrangement within the excel file'    elif error_type == 'not_exists_row':        filename, error_info = download_error_file(content, not_exists_list, error_type)        code = 10003        data = {"filename": filename, "error_type": 'not_exists_row', "error_info": not_exists_list}        msg = 'A deleted test case exists in the uploaded file'    else:        code, data, msg = 200, None, None    return code, data, msgdef download_error_file(content, not_exists_list, error_type):    data = xlrd.open_workbook(file_contents=content)    table_r = data.sheet_by_index(0)    rows = table_r.nrows    cols = table_r.ncols    file = xlwt.Workbook()    table_w = file.add_sheet('Sheet1', cell_overwrite_ok=True)    style_head = xlwt.easyxf('pattern: pattern solid, fore_colour ice_blue; font: bold on')    style_row = xlwt.easyxf('pattern: pattern solid, fore_colour yellow')    style_row_col = xlwt.easyxf('pattern: pattern solid, fore_colour red')    error_dict = {}    error_line = not_exists_list    if error_type not in ['error_value', 'redundant_column']:        error_line = []        for i in not_exists_list:            for j in range(0, cols):                error_line.append([i, j, None])    for item in error_line:        if item[0] in error_dict.keys():            error_dict[item[0]].append(item[1])        else:            error_dict[item[0]] = [item[1]]    for col in range(0, cols):        table_w.write(0, col, table_r.row_values(rowx=0, start_colx=0, end_colx=cols)[col], style_head)    for row in range(1, rows):        for col in range(0, cols):            if row in error_dict.keys():                if col in error_dict.get(row):                    table_w.write(row, col, table_r.row_values(rowx=row, start_colx=0, end_colx=cols)[col],                                  style_row_col)                else:                    table_w.write(row, col, table_r.row_values(rowx=row, start_colx=0, end_colx=cols)[col],                                  style_row)            else:                table_w.write(row, col, table_r.row_values(rowx=row, start_colx=0, end_colx=cols)[col])    filename = str(uuid.uuid4())    file.save(os.path.join(DIR_PATH, '%s.xls') % filename)    return filename, error_linedef download_file(request_params):    filename = request_params.get('filename', '')    file_path = os.path.join(DIR_PATH, '%s.xls')    if filename:        results = open(file_path % filename, 'rb').read()        os.remove(file_path % filename)    else:        cols = 35        field_mapping = json.loads(op11_redis_client.get('field_id2value'))        user_id2account = {value: key for key, value in json.loads(op11_redis_client.get('user_account2id')).items()}        field_mapping['id2account'] = user_id2account        style = xlwt.easyxf('pattern: pattern solid, fore_colour ice_blue; font: bold on')        file = xlwt.Workbook()        table = file.add_sheet('Sheet1', cell_overwrite_ok=True)        for col in range(0, cols):            table.write(0, col, table_head[col], style)        if request_params.get('mode') == 'result':            data = get_case_result_tool_for_download(request_params)        else:            data, _ = get_case_func(request_params)        current_row = 1        for data_row in data:            if request_params.get('mode') == 'result':                current_row = download_write_line_tool(table, data_row, field_mapping, current_row, cols)                continue            if request_params.get('without_null', False) and not data_row.get('case_result'):                continue            current_row = download_write_line_tool(table, data_row, field_mapping, current_row, cols)        filename = uuid.uuid4()        file.save(file_path % filename)        results = open(file_path % filename, 'rb').read()        os.remove(file_path % filename)    return filename, resultsdef download_write_line_tool(table, data_row, field_mapping, current_row, cols):    for col in range(0, len(key_list)):        field_key = key_list[col]        if col >= cols:            continue        if field_key.startswith('available_'):            value = '\n'.join([field_mapping.get(field_key).get(                str(field_value_id)) for field_value_id in data_row.get(field_key)])        elif col == 17:            value = field_mapping.get('id2account').get(data_row.get(field_key), 'null')        elif col in case_col and field_mapping.get(field_key):            value = field_mapping.get(field_key).get(str(data_row.get(field_key)))        elif 'case_result' not in data_row.keys():            if field_mapping.get(field_key):                value = field_mapping.get(field_key).get(str(data_row.get(field_key)))            elif col == 30:                value = field_mapping.get('id2account').get(data_row.get(field_key), 'null')            else:                value = data_row[field_key]        elif col in case_result_col:            if not data_row.get('case_result'):                value = 'null'            elif col == 30:                user = field_mapping.get('id2account').get(str(data_row.get(field_key)))                value = user if user else 'null'            elif col == 31:                value = data_row.get('case_result')[-1][field_key]            else:                value = field_mapping.get(field_key).get(                    str(data_row.get('case_result')[-1][field_key])                ) if field_mapping.get(field_key) else data_row.get('case_result')[-1][field_key]        else:            value = data_row[field_key]        table.write(current_row, col, value)    current_row += 1    return current_rowdef get_case_func(request_params):    filter_dict, start_num, end_num, mode = parse_get_case_params(request_params)    cluster = filter_dict.get('cluster')    if not start_num and not end_num:        current_case = op11_redis_client.lrange(f'test_case_cache_{cluster}', 0, -1)        if not current_case:            return [], None        if filter_dict.get('case_filter'):            current_case = test_case_filter(current_case, filter_dict.get('case_filter'), filter_dict.get('logic_dict'))        if filter_dict.get('result_filter'):            current_case = case_result_filter(current_case, filter_dict.get('result_filter'))        return [json.loads(case) if isinstance(case, str) else case for case in current_case], len(current_case)    else:        if not filter_dict.get('case_filter') and not filter_dict.get('result_filter'):            current_case = op11_redis_client.lrange(f'test_case_cache_{cluster}', start_num, end_num - 1)            data = update_case_result_response([json.loads(case) for case in current_case])            total_num = op11_redis_client.llen(f'test_case_cache_{cluster}')            return data, total_num        current_case = op11_redis_client.lrange(f'test_case_cache_{cluster}', 0, -1)        if filter_dict.get('case_filter'):            current_case = test_case_filter(current_case, filter_dict.get('case_filter'), filter_dict.get('logic_dict'))        if filter_dict.get('result_filter'):            current_case = case_result_filter(current_case, filter_dict.get('result_filter'))        total_num = len(current_case)        case_list = current_case[start_num: end_num] if end_num < total_num else current_case[start_num:]        data = update_case_result_response(case_list)        return data, total_numdef parse_get_case_params(request_params):    field_mapping = json.loads(op11_redis_client.get('field_value2id'))    page_size = request_params.get('page_size', '')    page_num = request_params.get('page_num', '')    mode = request_params.get('mode', 'latest')    start_num = (page_num - 1) * page_size if page_num and page_size else None    end_num = page_num * page_size if page_num and page_size else None    case_filter_dict = {}    for key in test_case_key:        if not request_params.get(key, []):            continue        value = request_params.get(key)        value = set(int(i) for i in value)        case_filter_dict[key] = value    result_filter_dict = {}    for key in case_result_key:        if not request_params.get(key, []):            continue        result_filter_dict[key] = list(set(int(i) for i in request_params.get(key)))        if field_mapping.get(key):            null_id = field_mapping.get(key).get('null')            if int(null_id) in result_filter_dict.get(key):                result_filter_dict[key].append(0)    if request_params.get('param', '') and request_params.get('value', ''):        if request_params.get('param') in test_case_param:            case_filter_dict[request_params.get('param')] = request_params.get('value').lower()        else:            result_filter_dict[request_params.get('param')] = request_params.get('value').lower()    logic_dict = {        'available_carline_logic': request_params.get('available_carline_logic', 'or'),        'available_variant_logic': request_params.get('available_variant_logic', 'or'),        'available_market_logic': request_params.get('available_market_logic', 'or'),        'available_platform_logic': request_params.get('available_platform_logic', 'or'),        'available_language_logic': request_params.get('available_language_logic', 'or'),        'available_environment_logic': request_params.get('available_environment_logic', 'or'),    }    filter_dict = {        'cluster': request_params.get('cluster')[0],        'case_filter': case_filter_dict,        'result_filter': result_filter_dict,        'logic_dict': logic_dict    }    return filter_dict, start_num, end_num, modedef test_case_filter(current_case, filter_dict, logic_dict):    case_list = []    for case in current_case:        if isinstance(case, str):            case = json.loads(case)        flag = True        for key, values in filter_dict.items():            if key.startswith('available_'):                if logic_dict.get(f'{key}_logic') == 'or':                    flag = True if values & set(case.get(key)) else False                elif logic_dict.get(f'{key}_logic') == 'and':                    flag = True if values & set(case.get(key)) == values else False            elif key in test_case_param:                if values not in str(case.get(key)):                    flag = False            elif case.get(key) not in values:                flag = False            if not flag:                break        if flag:            case_list.append(case)    return case_listdef case_result_filter(current_case, filter_dict):    result_data = []    for case in current_case:        if isinstance(case, str):            case = json.loads(case)        flag = True        case_result = case.get('case_result', [])        flag, current_case_result_list = parse_case_result(flag, case_result, filter_dict)        if not flag:            continue        case['case_result'] = current_case_result_list        result_data.append(case)    return result_datadef parse_case_result(flag, case_result, result_filter):    current_case_result_list = case_result[-1:] if case_result else []    if not current_case_result_list:        for key, value in result_filter.items():            if isinstance(value, list):                if not ({0} & set(value)):                    flag = False                    break            else:                flag = False                break        return flag, current_case_result_list    for key, value in current_case_result_list[-1].items():        if key not in result_filter.keys():            continue        if not value:            value = 0        if key in case_result_param:            if result_filter.get(key) not in str(value):                flag = False        elif int(value) not in result_filter.get(key):            flag = False    return flag, current_case_result_listdef update_case_result_response(case_data):    field_id2value = json.loads(op11_redis_client.get('field_id2value'))    user_info = json.loads(op11_redis_client.get('tms_user_info'))    result = []    for case in case_data:        case['function_name'] = field_id2value.get('function').get(str(case.get('function')))        case['sub_function_name'] = field_id2value.get('sub_function').get(str(case.get('sub_function')))        case['creator_name'] = user_info.get(str(case.get('creator')), {}).get('username')        case_result = case.get('case_result')        for key in case_result_key:            case[key] = case_result[-1].get(key) if case_result else None        result.append(case)    return resultdef create_case_func(request_params):    create_time = create_current_format_time()    test_case = TestCase(        creator=request_params.get('userid'),        category=request_params.get('category'),        function=request_params.get('function'),        sub_function=request_params.get('sub_function'),        fuLi_id=request_params.get('fuLi_id'),        level=request_params.get('level'),        cluster=request_params.get('cluster'),        available_platform=request_params.get('available_platform', []),        available_carline=request_params.get('available_carline', []),        available_variant=request_params.get('available_variant', []),        available_market=request_params.get('available_market', []),        available_language=request_params.get('available_language', []),        available_environment=request_params.get('available_environment', []),        title=request_params.get('title'),        precondition=request_params.get('precondition'),        action=request_params.get('action'),        expectation=request_params.get('expectation'),        reference_spec=request_params.get('reference_spec'),        create_time=create_time,        upgrade_time=create_time,        delete_flag=0,    )    mantis_db.session.add(test_case)    mantis_db.session.flush()    mantis_db.session.commit()    mantis_update_single_cache(test_case.id, update_method='create')    return 200, test_case.iddef edit_case_func(request_params):    case_id = request_params.get('m_id')    origin_cache = mantis_get_single_cache(case_id)    upgrade_time = create_current_format_time()    update_dict = {        'category': request_params.get('category'),        'function': request_params.get('function'),        'sub_function': request_params.get('sub_function'),        'fuLi_id': request_params.get('fuLi_id'),        'level': request_params.get('level'),        'cluster': request_params.get('cluster'),        'available_platform': request_params.get('available_platform', []),        'available_carline': request_params.get('available_carline', []),        'available_variant': request_params.get('available_variant', []),        'available_market': request_params.get('available_market', []),        'available_language': request_params.get('available_language', []),        'available_environment': request_params.get('available_environment', []),        'title': request_params.get('title'),        'precondition': request_params.get('precondition'),        'action': request_params.get('action'),        'expectation': request_params.get('expectation'),        'reference_spec': request_params.get('reference_spec'),        'upgrade_time': upgrade_time,    }    TestCase.query.filter(TestCase.id == case_id).update(update_dict)    mantis_db.session.commit()    mantis_update_single_cache(case_id, update_method='update', origin_cache=origin_cache)    return 200def delete_case_func(request_params):    case_id = request_params.get('m_id')    origin_cache = mantis_get_single_cache(case_id)    sw = request_params.get('sw', None)    key = request_params.get('key')    case_result_id = request_params.get('case_result_id', None)    if key != GLOBAL_KEY_D:        return 10007    if sw:        result_unique_id, current_result = mantis_get_single_result_cache(result_id=case_result_id)        CaseResult.query.filter(CaseResult.id == case_result_id).delete()        run_sync_mantis_hcp3_data_to_kpm([sw])    else:        result_unique_id = mantis_get_single_result_cache(case_id=case_id)        TestCase.query.filter(TestCase.id == case_id).delete()        CaseResult.query.filter(CaseResult.m_id == case_id).delete()    mantis_db.session.commit()    if sw:        mantis_update_single_cache(case_id, update_method='delete result', origin_cache=origin_cache,                                   result_unique_id=result_unique_id)    else:        mantis_update_single_cache(case_id, update_method='delete', origin_cache=origin_cache,                                   result_unique_id=result_unique_id)    return 200def create_case_result_func(request_params):    current_time = create_current_format_time()    test_sw = request_params.get('test_sw')    sw_map = json.loads(op11_redis_client.get('sw_map'))    cr = CaseResult(        m_id=request_params.get('m_id'),        tester=request_params.get('tester'),        test_sw=test_sw,        sw_num=generate_sw_num(test_sw, sw_map),        test_result=request_params.get('test_result'),        test_platform=request_params.get('test_platform'),        test_carline=request_params.get('test_carline'),        test_variant=request_params.get('test_variant'),        test_market=request_params.get('test_market'),        test_language=request_params.get('test_language'),        test_environment=request_params.get('test_environment'),        tb_type=request_params.get('tb_type'),        issue_descr=request_params.get('issue_descr'),        comments=request_params.get('comments'),        extra_1=request_params.get('extra_1'),        extra_2=request_params.get('extra_2'),        extra_3=request_params.get('extra_3'),        create_time=current_time,        upgrade_time=current_time    )    mantis_db.session.add(cr)    mantis_db.session.flush()    mantis_db.session.commit()    run_sync_mantis_hcp3_data_to_kpm([cr.test_sw])def edit_case_result_func(request_params):    cr = CaseResult.query.filter(CaseResult.id == request_params.get('id')).first()    update_dict = {'upgrade_time': create_current_format_time()}    update_field = [        'tester', 'test_sw', 'test_result', 'test_platform', 'test_carline', 'test_variant', 'test_market',        'test_language', 'test_environment', 'tb_type', 'issue_descr', 'comments', 'extra_1', 'extra_2', 'extra_3',    ]    for field in update_field:        if field not in request_params.keys():            continue        update_dict[field] = request_params.get(field, getattr(cr, field))        if field == 'test_sw':            sw_map = json.loads(op11_redis_client.get('sw_map'))            update_dict['sw_num'] = generate_sw_num(request_params.get('test_sw'), sw_map)    CaseResult.query.filter(CaseResult.id == request_params.get('id')).update(update_dict)    mantis_db.session.commit()    cur_case = CaseResult.query.filter(CaseResult.id == request_params.get('id')).first()    run_sync_mantis_hcp3_data_to_kpm([cur_case.test_sw])def case_result_aug_func(request_params):    current_time = create_current_format_time()    field_value2id = json.loads(op11_redis_client.get('field_value2id'))    mode = request_params.get('mode')    aug_data = request_params.get('aug_data')    data_list = []    aug_key = {        'Result': 'test_result',        'Test Market': 'test_market',        'Test Carline': 'test_carline',        'Test Variant': 'test_variant',        'Test Platform': 'test_platform',        'Test Lang.': 'test_language',        'Test Env': 'test_environment',    }    unprocessed_result_id = []    update_case_upgrade_time_list = []    for aug in aug_data:        if isinstance(aug, str):            aug = json.loads(aug)        data_dict = {            'm_id': aug.get('M-ID'),            'comments': aug.get('Comments'),            'test_sw': aug.get('SW Ver.'),            'aug_task_id': aug.get('Automation Task ID'),            'create_time': current_time,            'upgrade_time': current_time,            'extra_1': aug.get('Extra1'),            'extra_2': aug.get('Extra2'),            'extra_3': aug.get('Extra3')        }        err_dict = {}        if mode == 'update':            result_id = op11_redis_client.hget('aug_id_mapping', str(aug.get('Automation Task ID')))            if not result_id:                err_dict[aug.get('Automation Task ID')] = {                    aug.get('Automation Task ID'):                        f'not find the result_id by Automation Task ID: {aug.get("Automation Task ID")}'                }            data_dict['id'] = result_id        for aug_key, mantis_key in aug_key.items():            if not field_value2id.get(mantis_key).get(str(aug.get(aug_key)).strip().lower()):                if aug.get('Automation Task ID') not in err_dict.keys():                    err_dict[aug.get('Automation Task ID')] = {}                err_dict[aug.get('Automation Task ID')][aug_key] = aug.get(aug_key)                continue            data_dict[mantis_key] = int(field_value2id.get(mantis_key).get(str(aug.get(aug_key)).strip().lower()))        if err_dict:            unprocessed_result_id.append(err_dict)            continue        data_list.append(data_dict)        if aug.get('M-ID') and op11_redis_client.hget('exists_case', str(aug.get('M-ID'))):            update_case_upgrade_time_list.append({'id': aug.get('M-ID'), 'upgrade_time': current_time})    if unprocessed_result_id:        return 10016, unprocessed_result_id    if update_case_upgrade_time_list:        if mode == 'insert':            mantis_db.session.execute(CaseResult.__table__.insert(), data_list)        elif mode == 'update':            mantis_db.session.bulk_update_mappings(CaseResult, data_list)        mantis_db.session.bulk_update_mappings(TestCase, update_case_upgrade_time_list)    mantis_db.session.commit()    mantis_update_aug_cache()    return 200, unprocessed_result_iddef update_digital_map_case_func(case_params):    case_result_params = parse_digital_map_case_params(case_params)    case_result = CaseResult.query.filter(        CaseResult.m_id == case_result_params.get('m_id'),        CaseResult.sw == case_result_params.get('sw')    ).first()    if case_result:        del case_result_params['create_time']        CaseResult.query.filter(            CaseResult.m_id == case_result_params.get('m_id'),            CaseResult.sw == case_result_params.get('sw')        ).update(case_result_params)    else:        mantis_db.session.execute(            CaseResult.__table__.insert(), case_result_params        )    mantis_db.session.commit()    mantis_update_cache()def parse_digital_map_case_params(case_params):    create_time = create_current_format_time()    current_case_result = {'create_time': create_time, 'update_time': create_time}    if case_params.get('m_id'):        current_case_result['m_id'] = case_params.get('m_id')    if case_params.get('test_sw'):        current_case_result['test_sw'] = case_params.get('test_sw')    if case_params.get('test_result'):        current_case_result[            'test_result'        ] = case_params.get('test_result') if case_params.get('test_result') != 'none' else 'null'    if case_params.get('test_platform'):        current_case_result['test_platform'] = case_params.get('test_platform')    if case_params.get('test_carline'):        current_case_result['test_carline'] = case_params.get('test_carline')    if case_params.get('test_variant'):        current_case_result['test_variant'] = case_params.get('test_variant')    if case_params.get('test_market'):        current_case_result['test_market'] = case_params.get('test_market')    if case_params.get('test_language'):        current_case_result['test_language'] = case_params.get('test_language')    if case_params.get('test_environment'):        current_case_result['test_environment'] = case_params.get('test_environment')    if case_params.get('tb_type'):        current_case_result['tb_type'] = case_params.get('tb_type')    if case_params.get('issue_descr'):        current_case_result['issue_descr'] = case_params.get('issue_descr')    if case_params.get('comments'):        current_case_result['comments'] = case_params.get('comments')    if case_params.get('extra_1'):        current_case_result['extra_1'] = case_params.get('extra_1')    if case_params.get('extra_2'):        current_case_result['extra_2'] = case_params.get('extra_2')    if case_params.get('extra_3'):        current_case_result['extra_3'] = case_params.get('extra_3')    return current_case_resultdef get_digital_map_case_func():    case_result = CaseResult.query.filter(CaseResult.test_sw == 'e4245').all()    result = {}    for item in case_result:        if item.m_id not in result.keys():            result[item.m_id] = item.test_result if item.test_result != 'null' else None    return resultdef mantis_create_filter_config_tool(request_params):    current_time = create_current_format_time()    mfr = MantisFilterRecord(        filter_name=request_params.get('filter_name'),        filter_desc=request_params.get('filter_desc'),        creator=request_params.get('creator'),        mapping_rule_id=request_params.get('mapping_rule_id'),        filter_config=request_params.get('filter_config'),        visibility_level=request_params.get('visibility_level'),        create_time=current_time,        update_time=current_time,    )    mantis_db.session.add(mfr)    mantis_db.session.commit()def mantis_edit_filter_config_tool(request_params):    update_dict = {        'filter_name': request_params.get('filter_name'),        'filter_desc': request_params.get('filter_desc'),        'filter_config': request_params.get('filter_config'),        'visibility_level': request_params.get('visibility_level'),        'update_time': create_current_format_time(),    }    MantisFilterRecord.query.filter(        MantisFilterRecord.id == request_params.get('id')    ).update(update_dict)    mantis_db.session.commit()def mantis_delete_filter_config_tool(request_params):    MantisFilterRecord.query.filter(        MantisFilterRecord.id == request_params.get('id')    ).delete()    mantis_db.session.commit()def mantis_get_filter_config_tool(request_params):    mode = request_params.get('mode')    page_size = request_params.get('page_size')    page_num = request_params.get('page_num')    filter_mode = {        'public': [            or_(                MantisFilterRecord.creator == request_params.get('creator', 0),                MantisFilterRecord.visibility_level == 1            )        ],        'personal': [MantisFilterRecord.creator == request_params.get('creator', 0)],        'all': []    }    filter_list = filter_mode.get(mode, [])    if request_params.get('mapping_rule_id'):        filter_list.append(MantisFilterRecord.mapping_rule_id == request_params.get('mapping_rule_id'))    if request_params.get('filter_name'):        filter_list.append(MantisFilterRecord.filter_name.like(f"%{request_params.get('filter_name')}%"))    mfrs = MantisFilterRecord.query.filter(        *filter_list    ).order_by(MantisFilterRecord.create_time.desc()).offset((page_num - 1) * page_size).limit(page_size).all()    total_num = MantisFilterRecord.query.filter(*filter_list).count()    mapping_rule_id2name = get_mantis_mapping_rule()    user_info = json.loads(op11_redis_client.get("tms_user_info"))    result = {        'total_num': total_num,        'data': list(map(lambda message: generate_filter_config_list(message, mapping_rule_id2name, user_info), mfrs))    }    return resultdef get_mantis_mapping_rule():    mmr = MantisMappingRule.query.filter().all()    mapping_rule_id2name = {item.id: item.mapping_name for item in mmr}    return mapping_rule_id2namedef generate_filter_config_list(filter_record, mapping_rule, user_info):    return {        'id': filter_record.id,        'filter_name': filter_record.filter_name,        'filter_desc': filter_record.filter_desc,        'creator': filter_record.creator,        'creator_name': user_info.get(str(filter_record.creator)).get('username'),        'mapping_rule_id': filter_record.mapping_rule_id,        'mapping_rule_name': mapping_rule.get(filter_record.mapping_rule_id),        'cluster_id': filter_record.filter_config.get('cluster')[0] if filter_record.filter_config else None,        'filter_config': filter_record.filter_config,        'visibility_level': filter_record.visibility_level,        'create_time': str(filter_record.create_time),        'update_time': str(filter_record.update_time),    }def get_case_result_tool(request_params):    page_num, page_size, filter_list = parse_case_result_params(request_params)    case_result_list = mantis_db.session.query(        TestCase, CaseResult    ).join(CaseResult, CaseResult.m_id == TestCase.id).filter(        *filter_list    ).offset((page_num - 1) * page_size).limit(page_size).all()    total_num = mantis_db.session.query(        TestCase, CaseResult    ).join(CaseResult, CaseResult.m_id == TestCase.id).filter(        *filter_list    ).count()    ret = {        'case': generate_case_result(case_result_list),        'total_num': total_num    }    return retdef get_case_result_tool_for_download(request_params):    _, _, filter_list = parse_case_result_params(request_params)    case_result_list = mantis_db.session.query(        TestCase, CaseResult    ).join(CaseResult, CaseResult.m_id == TestCase.id).filter(        *filter_list    ).all()    ret = generate_case_result(case_result_list)    return retdef parse_case_result_params(params_dict):    filter_list = []    result_field_dict = CaseResult.get_field_dict()    page_num = params_dict.get('page_num')    page_size = params_dict.get('page_size')    case_field_dict = TestCase.get_field_dict()    if params_dict.get('fuLi_value'):        params_dict['fuLi_id'] = params_dict.get('fuLi_value')    if params_dict.get('param') and params_dict.get('value'):        params_dict[params_dict.get('param')] = params_dict.get('value')    for key in params_dict.keys():        if case_field_dict.get(key) and params_dict.get(key):            conditional_filter(filter_list, case_field_dict.get(key), params_dict.get(key))        elif result_field_dict.get(key) and params_dict.get(key):            conditional_filter(filter_list, result_field_dict.get(key), params_dict.get(key))    return page_num, page_size, filter_listdef generate_case_result(case_result_list):    case_list = []    for case, result in case_result_list:        current_case_dict = {            'tester': result.tester,            'creator': case.creator,            'category': case.category,            'function': case.function,            'sub_function': case.sub_function,            'fuLi_value': case.fuLi_id,            'level': case.level,            'cluster': case.cluster,            'available_platform': case.available_platform,            'available_carline': case.available_carline,            'available_variant': case.available_variant,            'available_market': case.available_market,            'available_language': case.available_language,            'available_environment': case.available_environment,            'title': case.title,            'precondition': case.precondition,            'action': case.action,            'expectation': case.expectation,            'reference_spec': case.reference_spec,            'delete_flag': case.delete_flag,            'result_id': result.id,            'm_id': result.m_id,            'test_sw': result.test_sw,            'sw_num': result.sw_num,            'test_result': result.test_result,            'test_platform': result.test_platform,            'test_carline': result.test_carline,            'test_variant': result.test_variant,            'test_market': result.test_market,            'test_language': result.test_language,            'test_environment': result.test_environment,            'tb_type': result.tb_type,            'issue_descr': result.issue_descr,            'comments': result.comments,            'cycle_id': result.cycle_id,            'extra_1': result.extra_1,            'extra_2': result.extra_2,            'extra_3': result.extra_3,            'create_time': str(result.create_time),            'upgrade_time': str(result.upgrade_time)        }        case_list.append(current_case_dict)    return case_listdef mantis_get_sw_tool():    case_result_sw = mantis_db.session.query(distinct(CaseResult.test_sw)).where(CaseResult.test_sw.isnot(None)).all()    ret = sorted([sw[0] for sw in case_result_sw])    return retdef mantis_generate_case_format_string_tool(request_params):    query = request_params.get('query')    mapping_rule_id = request_params.get('mapping_rule')    page_num = request_params.get('page_num', 1)    page_size = request_params.get('page_size', 50)    mapping = MantisMappingRule.query.filter(MantisMappingRule.id == int(mapping_rule_id)).first()    case_field_dict = TestCase.get_field_dict()    filter_list = []    mapping_rule = mapping.mapping_rule    if 'fuLi_value' in mapping_rule.keys():        mapping_rule['fuLi_id'] = mapping_rule['fuLi_value']    for key, values in mapping_rule.items():        if key not in case_field_dict.keys():            continue        if not values:            continue        if key.startswith('available_'):            value_list = []            for value in values:                value_list.append(case_field_dict[key].contains(value))            filter_list.append(or_(*value_list))        else:            filter_list.append(case_field_dict[key].in_(values))    filter_list.append(or_(TestCase.id.like(f'%{query}%'), TestCase.title.like(f'%{query}%')))    cases = mantis_db.session.query(        TestCase.id,        TestCase.title,        TestCase.function,        TestCase.sub_function    ).filter(*filter_list).offset((int(page_num) - 1) * int(page_size)).limit(int(page_size)).all()    ret = {        case.id: {            "m_id": case.id,            "title": f'{case.id}-{case.title}',            "function": case.function,            "sub_function": case.sub_function        }        for case in cases    }    return retdef case_trans_kpm():    # 读取配置    run_sync_mantis_hcp3_data_to_kpm()    return 200, 'success'